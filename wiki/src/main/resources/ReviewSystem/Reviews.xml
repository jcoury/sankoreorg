<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>ReviewSystem</web>
<name>Reviews</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1321445348000</creationDate>
<date>1321445348000</date>
<contentUpdateDate>1321445348000</contentUpdateDate>
<version>1.1</version>
<title>Reviews</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ReviewSystem.Reviews</name>
<number>0</number>
<className>XWiki.JavaScriptExtension</className>
<guid>4d004b1a-5176-4f55-88e9-ab0d1300a622</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>/*
if (typeof(Sankore) == 'undefined') {
  Sankore = new Object();
}
Sankore.Reviews = Class.create({
  initialize: function() {
    this.addListeners();
  },
  addListeners : function(){
    if($('reviews')){
      this.initializeLivetable();
    }
  },
  initializeLivetable : function(event){
    $$('input[type=radio]').each(function(item) {
      item.observe('click', function(event){
        event.stop();
        var searchForm = $('search-criteria-form');
        var radios = searchForm.getInputs('radio');
        radios.invoke('observe', 'click', function(evt){
        var radio = evt.element();
        switch(radio.name) {
          case 'criteria_grade_age_range' :
            console.log('criteria_grade_age_range');
            console.log($$('input:checked[type="radio"][name="criteria_grade_age_range"]').pluck('value'));
            break;
          case 'criteria_subject' :
            console.log('criteria_subject');
            console.log($$('input:checked[type="radio"][name="criteria_subject"]').pluck('value'));
            break;
          case 'criteria_resource_type' :
            console.log('criteria_resource_type');
            console.log($$('input:checked[type="radio"][name="criteria_resource_type"]').pluck('value'));
            break;
          case 'criteria_usage_type' :
            console.log('criteria_usage_type');
            console.log($$('input:checked[type="radio"][name="criteria_usage_type"]').pluck('value'));
            break; 
          }
        });
        
        var newUrl = livetable.getUrl + '&amp;doc.title=mi';
        livetable.getUrl = newUrl;
        livetable.totalRows=-1;
        livetable.fetchedRows=new Array();
        livetable.showRows(1, livetable.limit);
        
      });
    });
  }
});


document.observe('xwiki:dom:loaded', function(){
  new Sankore.Reviews();
});
*/

document.observe('xwiki:dom:loaded', function(){
  $$('input[type=checkbox]').each(function(checkbox){
  livetable.filter.inputs.push(checkbox);
  })
})

document.observe('xwiki:dom:loaded', function(){
  $$('input[type=checkbox]').each(function(item){
  item.observe('click', function(event){
    livetable.getRows(livetable.currentOffset, livetable.limit, livetable.currentOffset, livetable.limit);
    livetable.displayRows(livetable.currentOffset, livetable.limit);
  })
 })
})
</code></property><property><name></name></property><property><parse></parse></property><property><use>onDemand</use>
</property>
</object>
<content>{{velocity}}
#macro(reviewLivetable $divid $collist $colprops $options)
## Do not indent:
#if($xwiki.getCurrentContentSyntaxId() != "xwiki/1.0")
$xwiki.jsx.use($doc.fullName, {'minify':false})
#set($discard = $xwiki.ssx.use('CurrikiCode.SearchCriteria'))
#set($discard = $xwiki.jsx.use('CurrikiCode.SearchCriteria', {'minify' : false}))

{{html}}
#else {pre} #end
  ##
  ## SX deps.
  ##
  #set($ok = $xwiki.jsfx.use('js/xwiki/table/livetable.js', true))
  #set($ok = $xwiki.ssfx.use('js/xwiki/table/livetable.css', true))
  ##
  ## Options / defaults
  ##
  #if("$!options.translationPrefix" != '') #set($transprefix = $options.translationPrefix) #else #set($transprefix = '') #end
  #if("$!options.selectedColumn" != '')  #set($selectedColumn = $options.selectedColumn) #end
  #if("$!options.defaultOrder" == 'desc') #set($defaultOrder = 'desc') #else #set($defaultOrder = 'asc') #end
  #if("$!options.rowCount" != '') #set($count = $options.rowCount) #else #set($count = 15) #end
  #if("$!options.maxPages" != '') #set($maxPages = $options.maxPages) #else #set($maxPages = 10) #end
  #if("$!options.selectedColumn" != '') #set($selectedColumn = $options.selectedColumn) #end
  #if("$!options.callback" != '') #set($callback = $options.callback) #end
  #if("$!options.tagCloud" == '' || $options.tagCloud == false) #set($tagcloud=false) #else #set($tagcloud = true) #end
  #if("$!options.javascriptName" != '') #set($jsName = $options.javascriptName) #else #set($jsName = 'livetable') #end
  #if("$!options.topFilters" != '') #set($topfilters = $options.topFilters) #end
  #if("$options.pageSize" == '' || $!options.pageSize == false) #set($hasPageSize=false) #else #set($hasPageSize = true) #end
  #if("$!options.pageSizeBounds" != '') #set($pageSizeBounds = $options.pageSizeBounds) #end
  #set($classname = "$!options.className")
  #set($extraparams = "$!options.extraParams")
  ##
  ## Columns informations
  ##
  #set($collist2 = '')
  #set($classparams = '')
  #foreach($colname in $collist)
    #if("$!selectedColumn" == '' &amp;&amp; !$colname.startsWith('_'))
      #set($selectedColumn = $colname)
    #end
    #if($colname != '_actions')
      #set($collist2 = "${collist2},${colname}")
      #set($propClassName = "$!{colprops.get($colname).get('class')}")
      #if($propClassName != '')
        #set($classparams = "${classparams}&amp;${colname}_class=${propClassName}")
      #end
    #end
  #end
  #set($collist2 = $collist2.substring(1))
  #if("$!options.url" != '')
    #set($dataurl = $options.url)
  #elseif("$!options.resultPage" != '')
    #set($dataurl = $xwiki.getURL($options.resultPage, 'get', "outputSyntax=plain&amp;transprefix=${transprefix}&amp;classname=$!{classname}&amp;collist=${collist2}&amp;$!{extraparams}${classparams}") )
  #else
    #set($dataurl = $xwiki.getURL('XWiki.LiveTableResults', 'get', "outputSyntax=plain&amp;transprefix=${transprefix}&amp;classname=$!{classname}&amp;collist=${collist2}$!{extraparams}${classparams}"))
  #end
  ##
  ## HTML Table
  ##
&lt;div class="xwiki-livetable-container"&gt;
  #if("$!topfilters" !='') #set($hasTopFilters = true) #else #set($hasTopFilters = false) #end
  #if($tagcloud || $hasTopFilters)
  &lt;div class="tipfilters"&gt;
  #end
  #if($hasTopFilters)
  &lt;div id="${divid}-topfilters" class="xwiki-livetable-topfilters-tip #if($tagcloud)splitted#end"&gt;
    &lt;div&gt;
      &lt;div class="xwiki-livetable-topfilters-container"&gt;
      $topfilters
      &lt;/div&gt;
      &lt;div class="tippointer"&gt;
        &lt;div&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  #end
  #if($tagcloud)
    #set($discard = $xwiki.ssx.use('XWiki.TagCloud'))
    &lt;div id="${divid}-tagcloud" class="xwiki-livetable-tagcloud-tip hidden #if($hasTopFilters)splitted#end"&gt;
      &lt;div&gt;
        &lt;div class="xwiki-livetable-tagcloud-container"&gt;
          &lt;h2&gt;$msg.get('xe.livetable.tags.help')
	        &lt;span&gt;$msg.get('xe.livetable.tags.help.cancel')&lt;/span&gt;
          &lt;/h2&gt;
          &lt;div class="xwiki-livetable-tagcloud"&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="tippointer"&gt;
          &lt;div&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  #end
  #if($tagcloud || $hasTopFilters)
  &lt;/div&gt;
  #end
  &lt;table id="${divid}" class="xwiki-livetable"#if("$!options.description" != '') summary="$options.description"#end&gt;
    &lt;tr&gt;
      &lt;td class="xwiki-livetable-pagination"&gt;
        &lt;span id="${divid}-limits" class="xwiki-livetable-limits"&gt;&lt;/span&gt;
  #if($hasPageSize)
        &lt;span id="${divid}-pagesize" class="xwiki-livetable-pagesize"&gt;
            &lt;span&gt;$msg.get('xe.livetable.pagesize.label')&lt;/span&gt;
            &lt;span class="xwiki-livetable-pagesize-content" &gt;&lt;/span&gt;
        &lt;/span&gt;
  #end
        &lt;span id="${divid}-ajax-loader" class="xwiki-livetable-loader hidden"&gt;
          &lt;img src="$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')" alt="$msg.get('xe.livetable.loading')" title="" /&gt;
        &lt;/span&gt;
        &lt;span class="controlPagination"&gt;
          &lt;a title="$msg.get('xe.pagination.page.prev.title')" class="prevPagination" href="#"&gt;&lt;span class="hidden"&gt;$msg.get('xe.pagination.page.prev.title')&lt;/span&gt;&lt;/a&gt;
          &lt;a title="$msg.get('xe.pagination.page.next.title')" class="nextPagination" href="#"&gt;&lt;span class="hidden"&gt;$msg.get('xe.pagination.page.next.title')&lt;/span&gt;&lt;/a&gt;
        &lt;/span&gt;
        &lt;span class="pagination"&gt;
          &lt;span class="xwiki-livetable-pagination-text"&gt;$msg.get("xe.pagination.page")&lt;/span&gt;
          &lt;span class="xwiki-livetable-pagination-content" &gt;&lt;/span&gt;
        &lt;/span&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class="xwiki-livetable-display-container"&gt;
        &lt;table class="xwiki-livetable-display"&gt;
          &lt;thead class="xwiki-livetable-display-header"&gt;
            &lt;tr&gt;
            #set($columnCount = 0)
            #foreach($colname in $collist)
              #set($colprop = $colprops.get($colname))
              #if(("$!colprop.filterable" == '' || $colprop.filterable != false) &amp;&amp; "$!colname" != '_actions')
                #set($isFilterable = true)
              #else
                #set($isFilterable = false)
              #end
              #if(("$!colprop.sortable" == '' || $colprop.sortable != false) &amp;&amp; "$!colname" != '_actions')
                #set($isSortable = true)
              #else
                #set($isSortable = false)
              #end
              ## Determine the name to be displayed in the column header. Strategy is as following :
              ## - If defined the displayName passed as a column option wins
              ## - If not, and if a i18n prefix has been passed, we use the localization tool with the prefix + the column name
              ## - Finally, we fall back on the column name
              #if("$!colprop.displayName" != '')
                #set($displayName = $colprop.displayName)
              #elseif($transprefix != '')
                #set($displayName = $msg.get("${transprefix}${colname}"))
              #else
                #set($displayName = $colname)
              #end
              &lt;th class="xwiki-livetable-display-header-text $!colprop.headerClass #if($!colprop.type=='hidden')hidden#end #if($isSortable)sortable #if($colname == $selectedColumn)selected $defaultOrder#else asc#end#end#if ($colname == '_avatar') avatar#end" scope="col"&gt;
                #if($isSortable)&lt;a rel="${colname}"&gt;#end
                #if($isFilterable &amp;&amp; ("$!colprop.type"=="text"||"$!colprop.type"=="number"))&lt;label for="xwiki-livetable-${divid}-filter-${velocityCount}"&gt;#end
                $displayName
                #if($isFilterable &amp;&amp; ("$!colprop.type"=="text"||"$!colprop.type"=="number"))&lt;/label&gt;#end
                #if($isSortable)&lt;/a&gt;#end
                #set($columnCount = $mathtool.add($columnCount, 1))
              &lt;/th&gt;
            #end
            &lt;/tr&gt;
            &lt;tr class="xwiki-livetable-display-filters"&gt;
            #foreach($colname in $collist)
              #set($colprop = $colprops.get($colname))
              #if(("$!colprop.filterable" == '' || $colprop.filterable != false) &amp;&amp; "$!colname" != '_actions')
                #set($isFilterable = true)
              #else
                #set($isFilterable = false)
              #end
              #if("$!colprop.type" == 'list' &amp;&amp; $isFilterable)
                &lt;td class="xwiki-livetable-display-header-filter"&gt;
                #if($colprop.get('class'))
                  #set($propClassName = $colprop.get('class'))
                #else
                  #set($propClassName = $classname)
                #end
                #set($class = $xwiki.getDocument($propClassName).getxWikiClass())
                #set($list = '')
                #set($list = $class.get($colname).getListValues())
                &lt;select id="xwiki-livetable-${divid}-filter-${velocityCount}" name='${colname}'&gt;&lt;option value=''&gt;$msg.get('xe.livetable.select.all')&lt;/option&gt;
                #set($map = $class.get($colname).getMapValues())
                #foreach($listitem in $list)
                  #set ($l10n_key = "${propClassName}_${colname}_${listitem}")
                  #set ($l10n_value = $msg.get($l10n_key))
                  #if ($l10n_value == $l10n_key)
                    #set ($l10n_value = $map.get($listitem).getValue())
                  #end
                  &lt;option value="$listitem"&gt;$l10n_value&lt;/option&gt;
                #end
                &lt;/select&gt;
                &lt;/td&gt;
              #elseif(("$!colprop.type" == 'text' || "$!colprop.type" == 'number') &amp;&amp; $isFilterable)
                &lt;td class="xwiki-livetable-display-header-filter"&gt;&lt;input id="xwiki-livetable-${divid}-filter-${velocityCount}" name="${colname}" type="text" #if("!$colprop.size" != '') size="${colprop.size}" title="$msg.get('xe.livetable.filters.title', [$msg.get("${transprefix}${colname}")])"#end /&gt;&lt;/td&gt;
              #elseif("$!colprop.type" == 'hidden')
              #elseif($colname != '_actions' || $hasAdmin)
              &lt;td class="xwiki-livetable-display-header-filter"&gt;&lt;/td&gt;
              #end
            #end
            &lt;/tr&gt;
            &lt;tr class="xwiki-livetable-initial-message"&gt;
              &lt;td colspan="${columnCount}"&gt;
                &lt;div class="warningmessage"&gt;$msg.get('xe.livetable.environmentCannotLoadTableMessage')&lt;/div&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody id="${divid}-display" class="xwiki-livetable-display-body"&gt;&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class="xwiki-livetable-pagination"&gt;
        &lt;span class="controlPagination"&gt;
          &lt;a title="$msg.get('xe.pagination.page.prev.title')" class="prevPagination" href="#"&gt;&lt;span class="hidden"&gt;$msg.get('xe.pagination.page.prev.title')&lt;/span&gt;&lt;/a&gt;
          &lt;a title="$msg.get('xe.pagination.page.next.title')" class="nextPagination" href="#"&gt;&lt;span class="hidden"&gt;$msg.get('xe.pagination.page.next.title')&lt;/span&gt;&lt;/a&gt;
        &lt;/span&gt;
        &lt;span class="pagination"&gt;
          &lt;span class="xwiki-livetable-pagination-text"&gt;$msg.get('xe.pagination.page')&lt;/span&gt;
          &lt;span class="xwiki-livetable-pagination-content" &gt;&lt;/span&gt;
        &lt;/span&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
  &lt;div id="${divid}-inaccessible-docs" class="hidden"&gt;
    #info($msg.get('rightsmanager.documentrequireviewrights'))
  &lt;/div&gt;
  &lt;script type="text/javascript"&gt;
  //&lt;![CDATA[
(function() {
 var startup = function() {
  if (typeof XWiki !== "undefined" &amp;&amp; typeof XWiki.widgets !== "undefined" &amp;&amp; typeof XWiki.widgets.LiveTable !== "undefined") {
    // Make sure the Livetable widgets exists (It does not in the WYSIWYG for example).
  #if($callback)
    window.${jsName} = new XWiki.widgets.LiveTable("$dataurl", "${divid}", $callback ,{
                         "maxPages":$maxPages
	                    ,"limit":$count
     #if($hasTopFilters),"filterNodes" : [$("${divid}").down(".xwiki-livetable-display-filters"), $('${divid}-topfilters')]#end
     #if($hasPageSize &amp;&amp; "$!pageSizeBounds" != ''),"pageSizeBounds" : $pageSizeBounds#end
	          });
  #else
    $jsName = new XWiki.widgets.LiveTable("$dataurl", "${divid}", #livetablecallback($divid $collist $colprops $transprefix), {
                         "maxPages":$maxPages
	                    ,"limit":$count
     #if($hasTopFilters),"filterNodes" : [$("${divid}").down(".xwiki-livetable-display-filters"), $('${divid}-topfilters')]#end
     #if($hasPageSize &amp;&amp; "$!pageSizeBounds" != ''),"pageSizeBounds" : $pageSizeBounds#end
	          });
  #end
  #if($!hasPageSize)
    document.observe("xwiki:livetable:${divid}:loadingEntries", function() { $('${divid}-pagesize').addClassName("hidden"); } );
    document.observe("xwiki:livetable:${divid}:loadingComplete", function() { $('${divid}-pagesize').removeClassName("hidden"); } );
  #end
  }
 }
 if ((typeof(XWiki) != 'undefined') &amp;&amp; (typeof(XWiki.widgets) != 'undefined') &amp;&amp; (typeof(XWiki.widgets.LiveTable) != 'undefined')) {
   startup();
 } else {
   document.observe('xwiki:dom:loading', startup);
 }
})();
   //]]&gt;
  &lt;/script&gt;
&lt;/div&gt; ## xwiki-livetable-container
  #if($xwiki.getCurrentContentSyntaxId() != "xwiki/1.0"){{/html}}

#else {/pre} #end
#end
{{include document="ReviewSystem.SearchCriteriaCheckbox"/}}
#set($columns = ["doc.title", 'nomination_date', 'lastreview_date', 'status',  "_actions"])
#set($columnsProperties = {
  "doc.title" : {"type" : "text", "size" : 10, "sortable" : true, "filterable" : true},
  "nomination_date" : {"type" : "date", "size" : 10},
  "lastreview_date" : {"type" : "date", "size" : 10},
  "status" : {"type" : "list"},
  "_actions" : {"actions" : ["view", "review"]}
})
#set($options = {
  "resultPage" : "ReviewSystem.ReviewsResults",
   "className" : "CRS.CurrikiReviewStatusClass",
  "translationPrefix" : "xe.index.reviews.livetable.",
  "tagCloud" : false,
  "rowCount" : 10
})
#reviewLivetable("reviews" $columns $columnsProperties $options)
{{/velocity}}
</content></xwikidoc>